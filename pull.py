import cv2
import numpy as np


def split_image(image: np.ndarray, grid_size=(16, 12)) -> dict:
    """

    :param image:
    :param grid_size:
    :return:
    """
    # 读取图片
    dt = {}

    img_height, img_width, _ = image.shape

    # 计算每块的宽度和高度
    block_width = img_width // grid_size[0]
    block_height = img_height // grid_size[1]
    w2 = block_width // 2
    h2 = block_height // 2
    print(w2,h2)
    # 分割并保存每一块
    for i in range(grid_size[0]):
        for j in range(grid_size[1]):
            x_start = i * block_width
            y_start = j * block_height
            x_end = x_start + block_width
            y_end = y_start + block_height

            block = image[y_start:y_end, x_start:x_end]



            # 定义上下填充的颜色
            top_color ,bottom_color= colors[i][j]


            # 为每块图像的上半部分和下半部分填充颜色
            half_height = block_height // 2
            block[:half_height, :] = top_color
            block[half_height:, :] = bottom_color

            # 将处理后的块放入输出图像中
            image[y_start:y_end, x_start:x_end] = block

    return dt



# 生成16种不同的颜色
def generate_colors(num_colors):
    # 创建一个色彩空间的分割，确保颜色之间有差异
    colors = []
    for i in range(num_colors):
        r = (i * 255 // (num_colors - 1)) % 256
        g = ((i * 2) * 255 // (num_colors - 1)) % 256
        b = ((i * 3) * 255 // (num_colors - 1)) % 256
        colors.append((r, g, b))
    return colors

# 生成16种颜色

cr=generate_colors(16)
print(cr)
# colors=[]
# for i in  cr :
#     colors.append( [(i,cr[k])  for k in range(12)])
colors=[[((0, 0, 0), (0, 0, 0)), ((0, 0, 0), (17, 34, 51)), ((0, 0, 0), (34, 68, 102)), ((0, 0, 0), (51, 102, 153)), ((0, 0, 0), (68, 136, 204)), ((0, 0, 0), (85, 170, 255)), ((0, 0, 0), (102, 204, 50)), ((0, 0, 0), (119, 238, 101)), ((0, 0, 0), (136, 16, 152)), ((0, 0, 0), (153, 50, 203)), ((0, 0, 0), (170, 84, 254)), ((0, 0, 0), (187, 118, 49))], [((17, 34, 51), (0, 0, 0)), ((17, 34, 51), (17, 34, 51)), ((17, 34, 51), (34, 68, 102)), ((17, 34, 51), (51, 102, 153)), ((17, 34, 51), (68, 136, 204)), ((17, 34, 51), (85, 170, 255)), ((17, 34, 51), (102, 204, 50)), ((17, 34, 51), (119, 238, 101)), ((17, 34, 51), (136, 16, 152)), ((17, 34, 51), (153, 50, 203)), ((17, 34, 51), (170, 84, 254)), ((17, 34, 51), (187, 118, 49))], [((34, 68, 102), (0, 0, 0)), ((34, 68, 102), (17, 34, 51)), ((34, 68, 102), (34, 68, 102)), ((34, 68, 102), (51, 102, 153)), ((34, 68, 102), (68, 136, 204)), ((34, 68, 102), (85, 170, 255)), ((34, 68, 102), (102, 204, 50)), ((34, 68, 102), (119, 238, 101)), ((34, 68, 102), (136, 16, 152)), ((34, 68, 102), (153, 50, 203)), ((34, 68, 102), (170, 84, 254)), ((34, 68, 102), (187, 118, 49))], [((51, 102, 153), (0, 0, 0)), ((51, 102, 153), (17, 34, 51)), ((51, 102, 153), (34, 68, 102)), ((51, 102, 153), (51, 102, 153)), ((51, 102, 153), (68, 136, 204)), ((51, 102, 153), (85, 170, 255)), ((51, 102, 153), (102, 204, 50)), ((51, 102, 153), (119, 238, 101)), ((51, 102, 153), (136, 16, 152)), ((51, 102, 153), (153, 50, 203)), ((51, 102, 153), (170, 84, 254)), ((51, 102, 153), (187, 118, 49))], [((68, 136, 204), (0, 0, 0)), ((68, 136, 204), (17, 34, 51)), ((68, 136, 204), (34, 68, 102)), ((68, 136, 204), (51, 102, 153)), ((68, 136, 204), (68, 136, 204)), ((68, 136, 204), (85, 170, 255)), ((68, 136, 204), (102, 204, 50)), ((68, 136, 204), (119, 238, 101)), ((68, 136, 204), (136, 16, 152)), ((68, 136, 204), (153, 50, 203)), ((68, 136, 204), (170, 84, 254)), ((68, 136, 204), (187, 118, 49))], [((85, 170, 255), (0, 0, 0)), ((85, 170, 255), (17, 34, 51)), ((85, 170, 255), (34, 68, 102)), ((85, 170, 255), (51, 102, 153)), ((85, 170, 255), (68, 136, 204)), ((85, 170, 255), (85, 170, 255)), ((85, 170, 255), (102, 204, 50)), ((85, 170, 255), (119, 238, 101)), ((85, 170, 255), (136, 16, 152)), ((85, 170, 255), (153, 50, 203)), ((85, 170, 255), (170, 84, 254)), ((85, 170, 255), (187, 118, 49))], [((102, 204, 50), (0, 0, 0)), ((102, 204, 50), (17, 34, 51)), ((102, 204, 50), (34, 68, 102)), ((102, 204, 50), (51, 102, 153)), ((102, 204, 50), (68, 136, 204)), ((102, 204, 50), (85, 170, 255)), ((102, 204, 50), (102, 204, 50)), ((102, 204, 50), (119, 238, 101)), ((102, 204, 50), (136, 16, 152)), ((102, 204, 50), (153, 50, 203)), ((102, 204, 50), (170, 84, 254)), ((102, 204, 50), (187, 118, 49))], [((119, 238, 101), (0, 0, 0)), ((119, 238, 101), (17, 34, 51)), ((119, 238, 101), (34, 68, 102)), ((119, 238, 101), (51, 102, 153)), ((119, 238, 101), (68, 136, 204)), ((119, 238, 101), (85, 170, 255)), ((119, 238, 101), (102, 204, 50)), ((119, 238, 101), (119, 238, 101)), ((119, 238, 101), (136, 16, 152)), ((119, 238, 101), (153, 50, 203)), ((119, 238, 101), (170, 84, 254)), ((119, 238, 101), (187, 118, 49))], [((136, 16, 152), (0, 0, 0)), ((136, 16, 152), (17, 34, 51)), ((136, 16, 152), (34, 68, 102)), ((136, 16, 152), (51, 102, 153)), ((136, 16, 152), (68, 136, 204)), ((136, 16, 152), (85, 170, 255)), ((136, 16, 152), (102, 204, 50)), ((136, 16, 152), (119, 238, 101)), ((136, 16, 152), (136, 16, 152)), ((136, 16, 152), (153, 50, 203)), ((136, 16, 152), (170, 84, 254)), ((136, 16, 152), (187, 118, 49))], [((153, 50, 203), (0, 0, 0)), ((153, 50, 203), (17, 34, 51)), ((153, 50, 203), (34, 68, 102)), ((153, 50, 203), (51, 102, 153)), ((153, 50, 203), (68, 136, 204)), ((153, 50, 203), (85, 170, 255)), ((153, 50, 203), (102, 204, 50)), ((153, 50, 203), (119, 238, 101)), ((153, 50, 203), (136, 16, 152)), ((153, 50, 203), (153, 50, 203)), ((153, 50, 203), (170, 84, 254)), ((153, 50, 203), (187, 118, 49))], [((170, 84, 254), (0, 0, 0)), ((170, 84, 254), (17, 34, 51)), ((170, 84, 254), (34, 68, 102)), ((170, 84, 254), (51, 102, 153)), ((170, 84, 254), (68, 136, 204)), ((170, 84, 254), (85, 170, 255)), ((170, 84, 254), (102, 204, 50)), ((170, 84, 254), (119, 238, 101)), ((170, 84, 254), (136, 16, 152)), ((170, 84, 254), (153, 50, 203)), ((170, 84, 254), (170, 84, 254)), ((170, 84, 254), (187, 118, 49))], [((187, 118, 49), (0, 0, 0)), ((187, 118, 49), (17, 34, 51)), ((187, 118, 49), (34, 68, 102)), ((187, 118, 49), (51, 102, 153)), ((187, 118, 49), (68, 136, 204)), ((187, 118, 49), (85, 170, 255)), ((187, 118, 49), (102, 204, 50)), ((187, 118, 49), (119, 238, 101)), ((187, 118, 49), (136, 16, 152)), ((187, 118, 49), (153, 50, 203)), ((187, 118, 49), (170, 84, 254)), ((187, 118, 49), (187, 118, 49))], [((204, 152, 100), (0, 0, 0)), ((204, 152, 100), (17, 34, 51)), ((204, 152, 100), (34, 68, 102)), ((204, 152, 100), (51, 102, 153)), ((204, 152, 100), (68, 136, 204)), ((204, 152, 100), (85, 170, 255)), ((204, 152, 100), (102, 204, 50)), ((204, 152, 100), (119, 238, 101)), ((204, 152, 100), (136, 16, 152)), ((204, 152, 100), (153, 50, 203)), ((204, 152, 100), (170, 84, 254)), ((204, 152, 100), (187, 118, 49))], [((221, 186, 151), (0, 0, 0)), ((221, 186, 151), (17, 34, 51)), ((221, 186, 151), (34, 68, 102)), ((221, 186, 151), (51, 102, 153)), ((221, 186, 151), (68, 136, 204)), ((221, 186, 151), (85, 170, 255)), ((221, 186, 151), (102, 204, 50)), ((221, 186, 151), (119, 238, 101)), ((221, 186, 151), (136, 16, 152)), ((221, 186, 151), (153, 50, 203)), ((221, 186, 151), (170, 84, 254)), ((221, 186, 151), (187, 118, 49))], [((238, 220, 202), (0, 0, 0)), ((238, 220, 202), (17, 34, 51)), ((238, 220, 202), (34, 68, 102)), ((238, 220, 202), (51, 102, 153)), ((238, 220, 202), (68, 136, 204)), ((238, 220, 202), (85, 170, 255)), ((238, 220, 202), (102, 204, 50)), ((238, 220, 202), (119, 238, 101)), ((238, 220, 202), (136, 16, 152)), ((238, 220, 202), (153, 50, 203)), ((238, 220, 202), (170, 84, 254)), ((238, 220, 202), (187, 118, 49))], [((255, 254, 253), (0, 0, 0)), ((255, 254, 253), (17, 34, 51)), ((255, 254, 253), (34, 68, 102)), ((255, 254, 253), (51, 102, 153)), ((255, 254, 253), (68, 136, 204)), ((255, 254, 253), (85, 170, 255)), ((255, 254, 253), (102, 204, 50)), ((255, 254, 253), (119, 238, 101)), ((255, 254, 253), (136, 16, 152)), ((255, 254, 253), (153, 50, 203)), ((255, 254, 253), (170, 84, 254)), ((255, 254, 253), (187, 118, 49))]]

img = cv2.imread(r'C:\Users\xtiao\Desktop\output\sprite_interface2_arcadecenter_puzzle.NPK\puzzle_illust.img\1.PNG')

spl=split_image(img)
cv2.imshow('1',img)
cv2.waitKey(0)
cv2.imwrite(r'C:\Users\xtiao\Desktop\00.png',img)